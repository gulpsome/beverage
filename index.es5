'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _stamina = require('stamina');

var _sourcegate = require('sourcegate');

var _sourcegate2 = _interopRequireDefault(_sourcegate);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _harp = require('harp');

var _harp2 = _interopRequireDefault(_harp);

var _browserSync = require('browser-sync');

var _browserSync2 = _interopRequireDefault(_browserSync);

require('source-map-support').install();

var reload = _browserSync2['default'].reload;
var pkg = require(_path2['default'].join(process.cwd(), 'package.json'));

function def() {
  var opts = arguments[0] === undefined ? {} : arguments[0];

  opts.dotBeverage = opts.dotBeverage || ['node_modules/beverage/node_modules/hal-rc', '.'];

  var o = (0, _sourcegate2['default'])([{
    build: 'build',
    scripts: {
      exclude: ['test'], // because gulp-npm-test does testing better than gulp-npm-run
      requireStrict: true
    },
    test: { // NOTE: test is always enabled because of this default -- not so good...
      testsRe: /\.spec\.coffee$/ // TODO: move to .beverage after changing it to a glob
    }
  }].concat(opts.dotBeverage.map(function (file) {
    return file + '/.beverage';
  }), opts));

  if (o.scripts.include && o.scripts.include[o.build]) {
    o = (0, _sourcegate2['default'])([o, { scripts: { require: [o.build] } }]);
  }

  return o;
}

exports['default'] = function (gulpIn, opts) {
  var o = def(opts);
  var gulp = undefined;

  if (pkg.scripts && o.scripts) gulp = require('gulp-npm-run')(gulpIn, o.scripts);else gulp = require('gulp-help')(gulpIn);

  gulp.task('beverage', 'The recipe of this beverage.', function () {
    console.log('\nCurrent beverage options:');
    console.log('\n' + JSON.stringify(o, null, 2) + '\n');
  });

  if (pkg.scripts) {
    if (o.test && pkg.scripts.test) {
      (function () {
        var test = require('gulp-npm-test')(gulp, o.test);

        if (o.testWatch) {
          gulp.task('test:watch', o.testWatch.toString(), function () {
            return require('gulp-watch')(o.testWatch, test);
          });
        }
      })();
    }

    if (o.buildWatch && o.scripts) {
      gulp.task(o.build + ':watch', o.buildWatch.toString(), function () {
        return gulp.watch(o.buildWatch, [o.build]);
      });
    }
  }

  if (o.harp) {
    (function () {
      // infer the pollen wanted
      var anthers = ['harp'];
      if (o.harp.sync) anthers.push('harp-sync');
      anthers.push({ harp: o.harp });
      // harp options
      var ho = (0, _stamina.pollen)(anthers).harp;

      gulp.task(ho.name, ho.help, function () {
        _harp2['default'].server(ho.path || process.cwd(), {
          port: ho.port
        }, function () {
          if (ho.sync) {
            (0, _browserSync2['default'])(ho.sync.options);
            if (ho.sync.reload) {
              if (ho.sync.stream) {
                // streaming changes
                gulp.watch(ho.sync.stream).on('change', function (file) {
                  reload(file.path, { stream: true });
                });
              }
              // reload non-streaming (appended exclusions)
              var nonStreaming = ho.sync.reload.concat(ho.sync.stream.map(function (streamed) {
                return '!' + streamed + '+(|.map)';
              }));
              gulp.watch(nonStreaming, function () {
                reload();
              });
            }
          }
        });
      });
    })();
  }

  if (o.sourcegate && o.sourcegate.length) require('hal-rc')(o, gulp);

  return gulp;
};

module.exports = exports['default'];

//# sourceMappingURL=data:application/json;base64,