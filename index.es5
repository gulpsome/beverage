'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _stamina = require('stamina');

var _sourcegate = require('sourcegate');

var _sourcegate2 = _interopRequireDefault(_sourcegate);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _harp = require('harp');

var _harp2 = _interopRequireDefault(_harp);

var _browserSync = require('browser-sync');

var _browserSync2 = _interopRequireDefault(_browserSync);

require('source-map-support').install();

var reload = _browserSync2['default'].reload;
var pkg = require(_path2['default'].join(process.cwd(), 'package.json'));

function def() {
  var opts = arguments[0] === undefined ? {} : arguments[0];

  opts.dotBeverage = opts.dotBeverage || ['node_modules/beverage/node_modules/hal-rc', '.'];

  var o = (0, _sourcegate2['default'])([{
    build: 'build',
    scripts: {
      exclude: ['test'], // because gulp-npm-test does testing better than gulp-npm-run
      requireStrict: true
    },
    test: { // NOTE: test is always enabled because of this default -- not so good...
      testsRe: /\.spec\.coffee$/ // TODO: move to .beverage after changing it to a glob
    }
  }].concat(opts.dotBeverage.map(function (file) {
    return file + '/.beverage';
  }), opts));

  if (o.scripts.include && o.scripts.include[o.build]) {
    o = (0, _sourcegate2['default'])([o, { scripts: { require: [o.build] } }]);
  }

  return o;
}

exports['default'] = function (gulpIn, opts) {
  var o = def(opts);
  var gulp = undefined;

  if (pkg.scripts && o.scripts) gulp = require('gulp-npm-run')(gulpIn, o.scripts);else gulp = require('gulp-help')(gulpIn);

  if (pkg.scripts) {
    if (o.test && pkg.scripts.test) {
      (function () {
        var test = require('gulp-npm-test')(gulp, o.test);

        if (o.testWatch) {
          gulp.task('test:watch', o.testWatch.toString(), function () {
            return require('gulp-watch')(o.testWatch, test);
          });
        }
      })();
    }

    if (o.buildWatch && o.scripts) {
      gulp.task(o.build + ':watch', o.buildWatch.toString(), function () {
        return gulp.watch(o.buildWatch, [o.build]);
      });
    }
  }

  if (o.harp) {
    (function () {
      // infer the pollen wanted
      var anthers = ['harp'];
      if (o.harp.sync) anthers.push('harp-sync');
      anthers.push({ harp: o.harp });
      // harp options
      var ho = (0, _stamina.pollen)(anthers).harp;

      gulp.task(ho.name, ho.help, function () {
        _harp2['default'].server(ho.path || process.cwd(), {
          port: ho.port
        }, function () {
          if (ho.sync) {
            (0, _browserSync2['default'])(ho.sync.options);
            if (ho.sync.reload) {
              if (ho.sync.stream) {
                // streaming changes
                gulp.watch(ho.sync.stream).on('change', function (file) {
                  reload(file.path, { stream: true });
                });
              }
              // reload non-streaming (appended exclusions)
              var nonStreaming = ho.sync.reload.concat(ho.sync.stream.map(function (streamed) {
                return '!' + streamed + '+(|.map)';
              }));
              gulp.watch(nonStreaming, function () {
                reload();
              });
            }
          }
        });
      });
    })();
  }

  if (o.sourcegate && o.sourcegate.length) require('hal-rc')(o, gulp);

  return gulp;
};

module.exports = exports['default'];

//# sourceMappingURL=data:application/json;base64,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WUFBWSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDdEMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUEsUUFBUTt1QkFBSSxHQUFHLEdBQUcsUUFBUSxHQUFHLFVBQVU7ZUFBQSxDQUFDLENBQzVELENBQUE7QUFDRCxrQkFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsWUFBTTtBQUM3QixzQkFBTSxFQUFFLENBQUE7ZUFDVCxDQUFDLENBQUE7YUFDSDtXQUNGO1NBQ0YsQ0FBQyxDQUFBO09BQ0gsQ0FBQyxDQUFBOztHQUNIOztBQUVELE1BQUksQ0FBQyxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBOztBQUVuRSxTQUFPLElBQUksQ0FBQTtDQUNaIiwiZmlsZSI6ImluZGV4LmVzNSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKVxuXG5pbXBvcnQge3BvbGxlbn0gZnJvbSAnc3RhbWluYSdcbmltcG9ydCBzb3VyY2VnYXRlIGZyb20gJ3NvdXJjZWdhdGUnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IGhhcnAgZnJvbSAnaGFycCdcbmltcG9ydCBzeW5jIGZyb20gJ2Jyb3dzZXItc3luYydcbmxldCByZWxvYWQgPSBzeW5jLnJlbG9hZFxubGV0IHBrZyA9IHJlcXVpcmUocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdwYWNrYWdlLmpzb24nKSlcblxuZnVuY3Rpb24gZGVmKG9wdHMgPSB7fSkge1xuICAgIG9wdHMuZG90QmV2ZXJhZ2UgPSBvcHRzLmRvdEJldmVyYWdlIHx8IFtcbiAgICAgICdub2RlX21vZHVsZXMvYmV2ZXJhZ2Uvbm9kZV9tb2R1bGVzL2hhbC1yYycsXG4gICAgICAnLidcbiAgICBdXG5cbiAgICBsZXQgbyA9IHNvdXJjZWdhdGUoW3tcbiAgICAgIGJ1aWxkOiAnYnVpbGQnLFxuICAgICAgc2NyaXB0czoge1xuICAgICAgICBleGNsdWRlOiBbJ3Rlc3QnXSwgLy8gYmVjYXVzZSBndWxwLW5wbS10ZXN0IGRvZXMgdGVzdGluZyBiZXR0ZXIgdGhhbiBndWxwLW5wbS1ydW5cbiAgICAgICAgcmVxdWlyZVN0cmljdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRlc3Q6IHsgLy8gTk9URTogdGVzdCBpcyBhbHdheXMgZW5hYmxlZCBiZWNhdXNlIG9mIHRoaXMgZGVmYXVsdCAtLSBub3Qgc28gZ29vZC4uLlxuICAgICAgICB0ZXN0c1JlOiAvXFwuc3BlY1xcLmNvZmZlZSQvIC8vIFRPRE86IG1vdmUgdG8gLmJldmVyYWdlIGFmdGVyIGNoYW5naW5nIGl0IHRvIGEgZ2xvYlxuICAgICAgfVxuICAgIH1dLmNvbmNhdChvcHRzLmRvdEJldmVyYWdlLm1hcChmaWxlID0+IGZpbGUgKyAnLy5iZXZlcmFnZScpLCBvcHRzKSlcblxuICAgIGlmIChvLnNjcmlwdHMuaW5jbHVkZSAmJiBvLnNjcmlwdHMuaW5jbHVkZVtvLmJ1aWxkXSkge1xuICAgICAgbyA9IHNvdXJjZWdhdGUoW28sIHtzY3JpcHRzOiB7cmVxdWlyZTogW28uYnVpbGRdfX1dKVxuICAgIH1cblxuICAgIHJldHVybiBvXG4gIH1cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihndWxwSW4sIG9wdHMpIHtcbiAgbGV0IG8gPSBkZWYob3B0cylcbiAgbGV0IGd1bHBcblxuICBpZiAocGtnLnNjcmlwdHMgJiYgby5zY3JpcHRzKSBndWxwID0gcmVxdWlyZSgnZ3VscC1ucG0tcnVuJykoZ3VscEluLCBvLnNjcmlwdHMpXG4gIGVsc2UgZ3VscCA9IHJlcXVpcmUoJ2d1bHAtaGVscCcpKGd1bHBJbilcblxuICBpZiAocGtnLnNjcmlwdHMpIHtcbiAgICBpZiAoby50ZXN0ICYmIHBrZy5zY3JpcHRzLnRlc3QpIHtcbiAgICAgIGxldCB0ZXN0ID0gcmVxdWlyZSgnZ3VscC1ucG0tdGVzdCcpKGd1bHAsIG8udGVzdClcblxuICAgICAgaWYgKG8udGVzdFdhdGNoKSB7XG4gICAgICAgIGd1bHAudGFzaygndGVzdDp3YXRjaCcsIG8udGVzdFdhdGNoLnRvU3RyaW5nKCksICgpID0+XG4gICAgICAgICAgcmVxdWlyZSgnZ3VscC13YXRjaCcpKG8udGVzdFdhdGNoLCB0ZXN0KVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG8uYnVpbGRXYXRjaCAmJiBvLnNjcmlwdHMpIHtcbiAgICAgIGd1bHAudGFzayhvLmJ1aWxkICsgJzp3YXRjaCcsIG8uYnVpbGRXYXRjaC50b1N0cmluZygpLCAoKSA9PlxuICAgICAgICBndWxwLndhdGNoKG8uYnVpbGRXYXRjaCwgW28uYnVpbGRdKVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGlmIChvLmhhcnApIHtcbiAgICAvLyBpbmZlciB0aGUgcG9sbGVuIHdhbnRlZFxuICAgIGxldCBhbnRoZXJzID0gWydoYXJwJ11cbiAgICBpZiAoby5oYXJwLnN5bmMpIGFudGhlcnMucHVzaCgnaGFycC1zeW5jJylcbiAgICBhbnRoZXJzLnB1c2goe2hhcnA6IG8uaGFycH0pXG4gICAgLy8gaGFycCBvcHRpb25zXG4gICAgbGV0IGhvID0gcG9sbGVuKGFudGhlcnMpLmhhcnBcblxuICAgIGd1bHAudGFzayhoby5uYW1lLCBoby5oZWxwLCAoKSA9PiB7XG4gICAgICBoYXJwLnNlcnZlcihoby5wYXRoIHx8IHByb2Nlc3MuY3dkKCksIHtcbiAgICAgICAgcG9ydDogaG8ucG9ydFxuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBpZiAoaG8uc3luYykge1xuICAgICAgICAgIHN5bmMoaG8uc3luYy5vcHRpb25zKVxuICAgICAgICAgIGlmIChoby5zeW5jLnJlbG9hZCkge1xuICAgICAgICAgICAgaWYgKGhvLnN5bmMuc3RyZWFtKSB7XG4gICAgICAgICAgICAgIC8vIHN0cmVhbWluZyBjaGFuZ2VzXG4gICAgICAgICAgICAgIGd1bHAud2F0Y2goaG8uc3luYy5zdHJlYW0pLm9uKCdjaGFuZ2UnLCAoZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbG9hZChmaWxlLnBhdGgsIHtzdHJlYW06IHRydWV9KVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVsb2FkIG5vbi1zdHJlYW1pbmcgKGFwcGVuZGVkIGV4Y2x1c2lvbnMpXG4gICAgICAgICAgICBsZXQgbm9uU3RyZWFtaW5nID0gaG8uc3luYy5yZWxvYWQuY29uY2F0KFxuICAgICAgICAgICAgICBoby5zeW5jLnN0cmVhbS5tYXAoc3RyZWFtZWQgPT4gJyEnICsgc3RyZWFtZWQgKyAnKyh8Lm1hcCknKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgZ3VscC53YXRjaChub25TdHJlYW1pbmcsICgpID0+IHtcbiAgICAgICAgICAgICAgcmVsb2FkKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBpZiAoby5zb3VyY2VnYXRlICYmIG8uc291cmNlZ2F0ZS5sZW5ndGgpIHJlcXVpcmUoJ2hhbC1yYycpKG8sIGd1bHApXG5cbiAgcmV0dXJuIGd1bHBcbn1cbiJdfQ==