'use strict';
require('source-map-support').install();

var sourcegate = require('sourcegate');

var def = function def() {
  var opts = arguments[0] === undefined ? {} : arguments[0];

  opts.dotBeverage = opts.dotBeverage || ['.', 'node_modules/hal-rc', 'node_modules/beverage/node_modules/hal-rc'];

  var o = sourcegate([{
    build: 'build',
    scripts: {
      exclude: ['test'],
      requireStrict: true
    },
    test: {
      testsRe: /\.spec\.coffee$/
    },
    sourcegate: [],
    sourcegateModule: 'hal-rc', // could be any git repo as well
    sourcegatePrefix: 'rc/', // these would override any sourcegatePreset
    sourcegateRx: {
      jshint: { node: true },
      eslint: {
        parser: 'babel-eslint',
        env: { node: true }
      }
    },
    sourcegateWatch: true
  }].concat(opts.dotBeverage.map(function (path) {
    return path + '/.beverage';
  }), [opts]));

  if (o.scripts.include && o.scripts.include[o.build]) o = sourcegate(o, { scripts: { require: [o.build] } });

  return o;
};

module.exports = function (gulpIn, opts) {
  var o = def(opts);
  var gulp;

  if (o.scripts) gulp = require('gulp-npm-run')(gulpIn, o.scripts);else gulp = require('gulp-help')(gulpIn);

  if (o.test) {
    // TODO: ideally, this would check the caller's package.json
    // ... for presence of a "test" script
    var test = require('gulp-npm-test')(gulp, o.test);

    if (o.testWatch) {
      gulp.task('test:watch', o.testWatch.toString(), function () {
        require('gulp-watch')(o.testWatch, test);
      });
    }
  }

  if (o.buildWatch && o.scripts) {
    gulp.task('build:watch', o.buildWatch.toString(), function () {
      gulp.watch(o.buildWatch, [o.build]);
    });
  }

  if (o.sourcegate.length) require('hal-rc')(o, gulp);

  return gulp;
};

//# sourceMappingURL=data:application/json;base64,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LFlBQVc7QUFDM0QsVUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7S0FDcEMsQ0FBQyxDQUFBO0dBQ0g7O0FBRUQsTUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBOztBQUVuRCxTQUFPLElBQUksQ0FBQTtDQUNaLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKVxuXG52YXIgc291cmNlZ2F0ZSA9IHJlcXVpcmUoJ3NvdXJjZWdhdGUnKVxuXG5cbnZhciBkZWYgPSBmdW5jdGlvbihvcHRzID0ge30pIHtcbiAgICBvcHRzLmRvdEJldmVyYWdlID0gb3B0cy5kb3RCZXZlcmFnZSB8fCBbXG4gICAgICAnLicsXG4gICAgICAnbm9kZV9tb2R1bGVzL2hhbC1yYycsXG4gICAgICAnbm9kZV9tb2R1bGVzL2JldmVyYWdlL25vZGVfbW9kdWxlcy9oYWwtcmMnXG4gICAgXVxuXG4gICAgdmFyIG8gPSBzb3VyY2VnYXRlKFt7XG4gICAgICBidWlsZDogJ2J1aWxkJyxcbiAgICAgIHNjcmlwdHM6IHtcbiAgICAgICAgZXhjbHVkZTogWyd0ZXN0J10sXG4gICAgICAgIHJlcXVpcmVTdHJpY3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICB0ZXN0OiB7XG4gICAgICAgIHRlc3RzUmU6IC9cXC5zcGVjXFwuY29mZmVlJC9cbiAgICAgIH0sXG4gICAgICBzb3VyY2VnYXRlOiBbXSxcbiAgICAgIHNvdXJjZWdhdGVNb2R1bGU6ICdoYWwtcmMnLCAvLyBjb3VsZCBiZSBhbnkgZ2l0IHJlcG8gYXMgd2VsbFxuICAgICAgc291cmNlZ2F0ZVByZWZpeDogJ3JjLycsIC8vIHRoZXNlIHdvdWxkIG92ZXJyaWRlIGFueSBzb3VyY2VnYXRlUHJlc2V0XG4gICAgICBzb3VyY2VnYXRlUng6IHtcbiAgICAgICAganNoaW50OiB7bm9kZTogdHJ1ZX0sXG4gICAgICAgIGVzbGludDoge1xuICAgICAgICAgIHBhcnNlcjogJ2JhYmVsLWVzbGludCcsXG4gICAgICAgICAgZW52OiB7bm9kZTogdHJ1ZX1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNvdXJjZWdhdGVXYXRjaDogdHJ1ZVxuICAgIH1dLmNvbmNhdChvcHRzLmRvdEJldmVyYWdlLm1hcChwYXRoID0+IHBhdGggKyAnLy5iZXZlcmFnZScpLCBbb3B0c10pKVxuXG4gICAgaWYgKG8uc2NyaXB0cy5pbmNsdWRlICYmIG8uc2NyaXB0cy5pbmNsdWRlW28uYnVpbGRdKVxuICAgICAgbyA9IHNvdXJjZWdhdGUobywge3NjcmlwdHM6IHtyZXF1aXJlOiBbby5idWlsZF19fSlcblxuICAgIHJldHVybiBvXG4gIH1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGd1bHBJbiwgb3B0cykge1xuICB2YXIgbyA9IGRlZihvcHRzKVxuICB2YXIgZ3VscFxuXG4gIGlmIChvLnNjcmlwdHMpIGd1bHAgPSByZXF1aXJlKCdndWxwLW5wbS1ydW4nKShndWxwSW4sIG8uc2NyaXB0cylcbiAgZWxzZSBndWxwID0gcmVxdWlyZSgnZ3VscC1oZWxwJykoZ3VscEluKVxuXG4gIGlmIChvLnRlc3QpIHtcbiAgICAvLyBUT0RPOiBpZGVhbGx5LCB0aGlzIHdvdWxkIGNoZWNrIHRoZSBjYWxsZXIncyBwYWNrYWdlLmpzb25cbiAgICAvLyAuLi4gZm9yIHByZXNlbmNlIG9mIGEgXCJ0ZXN0XCIgc2NyaXB0XG4gICAgdmFyIHRlc3QgPSByZXF1aXJlKCdndWxwLW5wbS10ZXN0JykoZ3VscCwgby50ZXN0KVxuXG4gICAgaWYgKG8udGVzdFdhdGNoKSB7XG4gICAgICBndWxwLnRhc2soJ3Rlc3Q6d2F0Y2gnLCBvLnRlc3RXYXRjaC50b1N0cmluZygpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVxdWlyZSgnZ3VscC13YXRjaCcpKG8udGVzdFdhdGNoLCB0ZXN0KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBpZiAoby5idWlsZFdhdGNoICYmIG8uc2NyaXB0cykge1xuICAgIGd1bHAudGFzaygnYnVpbGQ6d2F0Y2gnLCBvLmJ1aWxkV2F0Y2gudG9TdHJpbmcoKSwgZnVuY3Rpb24oKSB7XG4gICAgICBndWxwLndhdGNoKG8uYnVpbGRXYXRjaCwgW28uYnVpbGRdKVxuICAgIH0pXG4gIH1cblxuICBpZiAoby5zb3VyY2VnYXRlLmxlbmd0aCkgcmVxdWlyZSgnaGFsLXJjJykobywgZ3VscClcblxuICByZXR1cm4gZ3VscFxufVxuIl19