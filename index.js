'use strict';
require('source-map-support').install();

var sourcegate = require('sourcegate');

function def() {
  var opts = arguments[0] === undefined ? {} : arguments[0];

  opts.dotBeverage = opts.dotBeverage || ['.', 'node_modules/hal-rc', 'node_modules/beverage/node_modules/hal-rc'];

  var o = sourcegate([{
    build: 'build',
    scripts: {
      exclude: ['test'],
      requireStrict: true
    },
    test: {
      testsRe: /\.spec\.coffee$/
    },
    sourcegate: [],
    sourcegateModule: 'hal-rc', // could be any git repo as well
    sourcegatePrefix: 'rc/', // these would override any sourcegatePreset
    sourcegateRx: {
      jshint: { node: true },
      eslint: {
        parser: 'babel-eslint',
        env: { node: true }
      }
    },
    sourcegateWatch: true
  }].concat(opts.dotBeverage.map(function (path) {
    return path + '/.beverage';
  }), [opts]));

  if (o.scripts.include && o.scripts.include[o.build]) o = sourcegate([o, { scripts: { require: [o.build] } }]);

  return o;
}

module.exports = function (gulpIn, opts) {
  var o = def(opts),
      gulp = undefined;

  if (o.scripts) gulp = require('gulp-npm-run')(gulpIn, o.scripts);else gulp = require('gulp-help')(gulpIn);

  if (o.test) {
    (function () {
      // TODO: ideally, this would check the caller's package.json
      // ... for presence of a "test" script
      var test = require('gulp-npm-test')(gulp, o.test);

      if (o.testWatch) {
        gulp.task('test:watch', o.testWatch.toString(), function () {
          require('gulp-watch')(o.testWatch, test);
        });
      }
    })();
  }

  if (o.buildWatch && o.scripts) {
    gulp.task('build:watch', o.buildWatch.toString(), function () {
      gulp.watch(o.buildWatch, [o.build]);
    });
  }

  if (o.sourcegate.length) require('hal-rc')(o, gulp);

  return gulp;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmVzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQTtBQUNaLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBOztBQUV2QyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7O0FBRXRDLFNBQVMsR0FBRyxHQUFZO01BQVgsSUFBSSxnQ0FBRyxFQUFFOztBQUNsQixNQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLElBQUksQ0FDckMsR0FBRyxFQUNILHFCQUFxQixFQUNyQiwyQ0FBMkMsQ0FDNUMsQ0FBQTs7QUFFRCxNQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUNsQixTQUFLLEVBQUUsT0FBTztBQUNkLFdBQU8sRUFBRTtBQUNQLGFBQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQztBQUNqQixtQkFBYSxFQUFFLElBQUk7S0FDcEI7QUFDRCxRQUFJLEVBQUU7QUFDSixhQUFPLEVBQUUsaUJBQWlCO0tBQzNCO0FBQ0QsY0FBVSxFQUFFLEVBQUU7QUFDZCxvQkFBZ0IsRUFBRSxRQUFRO0FBQzFCLG9CQUFnQixFQUFFLEtBQUs7QUFDdkIsZ0JBQVksRUFBRTtBQUNaLFlBQU0sRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUM7QUFDcEIsWUFBTSxFQUFFO0FBQ04sY0FBTSxFQUFFLGNBQWM7QUFDdEIsV0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQztPQUNsQjtLQUNGO0FBQ0QsbUJBQWUsRUFBRSxJQUFJO0dBQ3RCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO1dBQUksSUFBSSxHQUFHLFlBQVk7R0FBQSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7O0FBRXJFLE1BQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUNqRCxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7O0FBRXRELFNBQU8sQ0FBQyxDQUFBO0NBQ1Q7O0FBR0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDdEMsTUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztNQUNiLElBQUksWUFBQSxDQUFBOztBQUVSLE1BQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsS0FDM0QsSUFBSSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTs7QUFFeEMsTUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFOzs7O0FBR1YsVUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7O0FBRWpELFVBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRTtBQUNmLFlBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsWUFBVztBQUN6RCxpQkFBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDekMsQ0FBQyxDQUFBO09BQ0g7O0dBQ0Y7O0FBRUQsTUFBSSxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7QUFDN0IsUUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxZQUFXO0FBQzNELFVBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0tBQ3BDLENBQUMsQ0FBQTtHQUNIOztBQUVELE1BQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTs7QUFFbkQsU0FBTyxJQUFJLENBQUE7Q0FDWixDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5yZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKClcblxudmFyIHNvdXJjZWdhdGUgPSByZXF1aXJlKCdzb3VyY2VnYXRlJylcblxuZnVuY3Rpb24gZGVmKG9wdHMgPSB7fSkge1xuICAgIG9wdHMuZG90QmV2ZXJhZ2UgPSBvcHRzLmRvdEJldmVyYWdlIHx8IFtcbiAgICAgICcuJyxcbiAgICAgICdub2RlX21vZHVsZXMvaGFsLXJjJyxcbiAgICAgICdub2RlX21vZHVsZXMvYmV2ZXJhZ2Uvbm9kZV9tb2R1bGVzL2hhbC1yYydcbiAgICBdXG5cbiAgICBsZXQgbyA9IHNvdXJjZWdhdGUoW3tcbiAgICAgIGJ1aWxkOiAnYnVpbGQnLFxuICAgICAgc2NyaXB0czoge1xuICAgICAgICBleGNsdWRlOiBbJ3Rlc3QnXSxcbiAgICAgICAgcmVxdWlyZVN0cmljdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRlc3Q6IHtcbiAgICAgICAgdGVzdHNSZTogL1xcLnNwZWNcXC5jb2ZmZWUkL1xuICAgICAgfSxcbiAgICAgIHNvdXJjZWdhdGU6IFtdLFxuICAgICAgc291cmNlZ2F0ZU1vZHVsZTogJ2hhbC1yYycsIC8vIGNvdWxkIGJlIGFueSBnaXQgcmVwbyBhcyB3ZWxsXG4gICAgICBzb3VyY2VnYXRlUHJlZml4OiAncmMvJywgLy8gdGhlc2Ugd291bGQgb3ZlcnJpZGUgYW55IHNvdXJjZWdhdGVQcmVzZXRcbiAgICAgIHNvdXJjZWdhdGVSeDoge1xuICAgICAgICBqc2hpbnQ6IHtub2RlOiB0cnVlfSxcbiAgICAgICAgZXNsaW50OiB7XG4gICAgICAgICAgcGFyc2VyOiAnYmFiZWwtZXNsaW50JyxcbiAgICAgICAgICBlbnY6IHtub2RlOiB0cnVlfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc291cmNlZ2F0ZVdhdGNoOiB0cnVlXG4gICAgfV0uY29uY2F0KG9wdHMuZG90QmV2ZXJhZ2UubWFwKHBhdGggPT4gcGF0aCArICcvLmJldmVyYWdlJyksIFtvcHRzXSkpXG5cbiAgICBpZiAoby5zY3JpcHRzLmluY2x1ZGUgJiYgby5zY3JpcHRzLmluY2x1ZGVbby5idWlsZF0pXG4gICAgICBvID0gc291cmNlZ2F0ZShbbywge3NjcmlwdHM6IHtyZXF1aXJlOiBbby5idWlsZF19fV0pXG5cbiAgICByZXR1cm4gb1xuICB9XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihndWxwSW4sIG9wdHMpIHtcbiAgbGV0IG8gPSBkZWYob3B0cyksXG4gICAgICBndWxwXG5cbiAgaWYgKG8uc2NyaXB0cykgZ3VscCA9IHJlcXVpcmUoJ2d1bHAtbnBtLXJ1bicpKGd1bHBJbiwgby5zY3JpcHRzKVxuICBlbHNlIGd1bHAgPSByZXF1aXJlKCdndWxwLWhlbHAnKShndWxwSW4pXG5cbiAgaWYgKG8udGVzdCkge1xuICAgIC8vIFRPRE86IGlkZWFsbHksIHRoaXMgd291bGQgY2hlY2sgdGhlIGNhbGxlcidzIHBhY2thZ2UuanNvblxuICAgIC8vIC4uLiBmb3IgcHJlc2VuY2Ugb2YgYSBcInRlc3RcIiBzY3JpcHRcbiAgICBsZXQgdGVzdCA9IHJlcXVpcmUoJ2d1bHAtbnBtLXRlc3QnKShndWxwLCBvLnRlc3QpXG5cbiAgICBpZiAoby50ZXN0V2F0Y2gpIHtcbiAgICAgIGd1bHAudGFzaygndGVzdDp3YXRjaCcsIG8udGVzdFdhdGNoLnRvU3RyaW5nKCksIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXF1aXJlKCdndWxwLXdhdGNoJykoby50ZXN0V2F0Y2gsIHRlc3QpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlmIChvLmJ1aWxkV2F0Y2ggJiYgby5zY3JpcHRzKSB7XG4gICAgZ3VscC50YXNrKCdidWlsZDp3YXRjaCcsIG8uYnVpbGRXYXRjaC50b1N0cmluZygpLCBmdW5jdGlvbigpIHtcbiAgICAgIGd1bHAud2F0Y2goby5idWlsZFdhdGNoLCBbby5idWlsZF0pXG4gICAgfSlcbiAgfVxuXG4gIGlmIChvLnNvdXJjZWdhdGUubGVuZ3RoKSByZXF1aXJlKCdoYWwtcmMnKShvLCBndWxwKVxuXG4gIHJldHVybiBndWxwXG59XG4iXX0=