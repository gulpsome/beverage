'use strict';
require('source-map-support').install();

var merge = require('lodash.merge');
var sourcegate = require('sourcegate');

var def = function def() {
  var opts = arguments[0] === undefined ? {} : arguments[0];

  opts.dotBeverage = opts.dotBeverage || ['.', 'node_modules/hal-rc', 'node_modules/beverage/node_modules/hal-rc'];

  var o = sourcegate([{
    build: 'build',
    scripts: {
      exclude: ['test'],
      requireStrict: true
    },
    test: {
      testsRe: /\.spec\.coffee$/
    },
    sourcegate: [],
    sourcegateModule: 'hal-rc', // could be any git repo as well
    sourcegatePrefix: 'rc/', // these would override any sourcegatePreset
    sourcegateRx: {
      jshint: { node: true },
      eslint: {
        parser: 'babel-eslint',
        env: { node: true }
      }
    },
    sourcegateWatch: true
  }].concat(opts.dotBeverage.map(function (path) {
    return path + '/.beverage';
  }), [opts]));

  if (o.scripts.include && o.scripts.include[o.build]) o = merge({}, o, { scripts: { require: [o.build] } });

  return o;
};

module.exports = function (gulpIn, opts) {
  var o = def(opts);
  var gulp;

  if (o.scripts) gulp = require('gulp-npm-run')(gulpIn, o.scripts);else gulp = require('gulp-help')(gulpIn);

  if (o.test) {
    // TODO: ideally, this would check the caller's package.json
    // ... for presence of a "test" script
    var test = require('gulp-npm-test')(gulp, o.test);

    if (o.testWatch) {
      gulp.task('test:watch', o.testWatch.toString(), function () {
        require('gulp-watch')(o.testWatch, test);
      });
    }
  }

  if (o.buildWatch && o.scripts) {
    gulp.task('build:watch', o.buildWatch.toString(), function () {
      gulp.watch(o.buildWatch, [o.build]);
    });
  }

  if (o.sourcegate.length) require('hal-rc')(o, gulp);

  return gulp;
};

//# sourceMappingURL=data:application/json;base64,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QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsWUFBVztBQUMzRCxVQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtLQUNwQyxDQUFDLENBQUE7R0FDSDs7QUFFRCxNQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7O0FBRW5ELFNBQU8sSUFBSSxDQUFBO0NBQ1osQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpXG5cbnZhciBtZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC5tZXJnZScpXG52YXIgc291cmNlZ2F0ZSA9IHJlcXVpcmUoJ3NvdXJjZWdhdGUnKVxuXG5cbnZhciBkZWYgPSBmdW5jdGlvbihvcHRzID0ge30pIHtcbiAgICBvcHRzLmRvdEJldmVyYWdlID0gb3B0cy5kb3RCZXZlcmFnZSB8fCBbXG4gICAgICAnLicsXG4gICAgICAnbm9kZV9tb2R1bGVzL2hhbC1yYycsXG4gICAgICAnbm9kZV9tb2R1bGVzL2JldmVyYWdlL25vZGVfbW9kdWxlcy9oYWwtcmMnXG4gICAgXVxuXG4gICAgdmFyIG8gPSBzb3VyY2VnYXRlKFt7XG4gICAgICBidWlsZDogJ2J1aWxkJyxcbiAgICAgIHNjcmlwdHM6IHtcbiAgICAgICAgZXhjbHVkZTogWyd0ZXN0J10sXG4gICAgICAgIHJlcXVpcmVTdHJpY3Q6IHRydWVcbiAgICAgIH0sXG4gICAgICB0ZXN0OiB7XG4gICAgICAgIHRlc3RzUmU6IC9cXC5zcGVjXFwuY29mZmVlJC9cbiAgICAgIH0sXG4gICAgICBzb3VyY2VnYXRlOiBbXSxcbiAgICAgIHNvdXJjZWdhdGVNb2R1bGU6ICdoYWwtcmMnLCAvLyBjb3VsZCBiZSBhbnkgZ2l0IHJlcG8gYXMgd2VsbFxuICAgICAgc291cmNlZ2F0ZVByZWZpeDogJ3JjLycsIC8vIHRoZXNlIHdvdWxkIG92ZXJyaWRlIGFueSBzb3VyY2VnYXRlUHJlc2V0XG4gICAgICBzb3VyY2VnYXRlUng6IHtcbiAgICAgICAganNoaW50OiB7bm9kZTogdHJ1ZX0sXG4gICAgICAgIGVzbGludDoge1xuICAgICAgICAgIHBhcnNlcjogJ2JhYmVsLWVzbGludCcsXG4gICAgICAgICAgZW52OiB7bm9kZTogdHJ1ZX1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNvdXJjZWdhdGVXYXRjaDogdHJ1ZVxuICAgIH1dLmNvbmNhdChvcHRzLmRvdEJldmVyYWdlLm1hcChwYXRoID0+IHBhdGggKyAnLy5iZXZlcmFnZScpLCBbb3B0c10pKVxuXG4gICAgaWYgKG8uc2NyaXB0cy5pbmNsdWRlICYmIG8uc2NyaXB0cy5pbmNsdWRlW28uYnVpbGRdKVxuICAgICAgbyA9IG1lcmdlKHt9LCBvLCB7c2NyaXB0czoge3JlcXVpcmU6IFtvLmJ1aWxkXX19KVxuXG4gICAgcmV0dXJuIG9cbiAgfVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZ3VscEluLCBvcHRzKSB7XG4gIHZhciBvID0gZGVmKG9wdHMpXG4gIHZhciBndWxwXG5cbiAgaWYgKG8uc2NyaXB0cykgZ3VscCA9IHJlcXVpcmUoJ2d1bHAtbnBtLXJ1bicpKGd1bHBJbiwgby5zY3JpcHRzKVxuICBlbHNlIGd1bHAgPSByZXF1aXJlKCdndWxwLWhlbHAnKShndWxwSW4pXG5cbiAgaWYgKG8udGVzdCkge1xuICAgIC8vIFRPRE86IGlkZWFsbHksIHRoaXMgd291bGQgY2hlY2sgdGhlIGNhbGxlcidzIHBhY2thZ2UuanNvblxuICAgIC8vIC4uLiBmb3IgcHJlc2VuY2Ugb2YgYSBcInRlc3RcIiBzY3JpcHRcbiAgICB2YXIgdGVzdCA9IHJlcXVpcmUoJ2d1bHAtbnBtLXRlc3QnKShndWxwLCBvLnRlc3QpXG5cbiAgICBpZiAoby50ZXN0V2F0Y2gpIHtcbiAgICAgIGd1bHAudGFzaygndGVzdDp3YXRjaCcsIG8udGVzdFdhdGNoLnRvU3RyaW5nKCksIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXF1aXJlKCdndWxwLXdhdGNoJykoby50ZXN0V2F0Y2gsIHRlc3QpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlmIChvLmJ1aWxkV2F0Y2ggJiYgby5zY3JpcHRzKSB7XG4gICAgZ3VscC50YXNrKCdidWlsZDp3YXRjaCcsIG8uYnVpbGRXYXRjaC50b1N0cmluZygpLCBmdW5jdGlvbigpIHtcbiAgICAgIGd1bHAud2F0Y2goby5idWlsZFdhdGNoLCBbby5idWlsZF0pXG4gICAgfSlcbiAgfVxuXG4gIGlmIChvLnNvdXJjZWdhdGUubGVuZ3RoKSByZXF1aXJlKCdoYWwtcmMnKShvLCBndWxwKVxuXG4gIHJldHVybiBndWxwXG59XG4iXX0=