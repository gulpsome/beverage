// Generated by CoffeeScript 1.9.1
var R, path, sourcegate;

require("source-map-support").install();

R = require("ramda");

path = require("path");

sourcegate = require("sourcegate");

module.exports = function(o, gulp) {
  var base, config, empty, i, len, module, prefix, ready, ref, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (i = 0, len = ref.length; i < len; i++) {
    sg = ref[i];
    res = R.clone(empty);
    if (sg.sources == null) {
      sg.sources = [];
    } else if (!R.is(Array, sg.sources)) {
      sg.sources = [sg.sources];
    }
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      sources = [];
      config = "node_modules";
      module = sg.module || o.sourcegateModule;
      prefix = sg.prefix || o.sourcegatePrefix || '';
      if (module) {
        config = path.normalize(config + "/" + module + "/" + prefix + sg.recipe + "rc");
        if (o.sourcegateWatch) {
          watch.push(config);
        }
        sources.push(config);
        if ((base = sg.options).write == null) {
          base.write = {};
        }
        sg.options.write.path = "." + sg.recipe + "rc";
      }
      res = [sources.concat(sg.sources), sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    gulp.task("sourcegate", "Write sourcegate targets.", function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = ready.length; j < len1; j++) {
        sg = ready[j];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourcegateWatch) {
      gulp.task("sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  return ready;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlZ2F0ZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic291cmNlZ2F0ZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLG1CQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLENBQ0EsR0FBSSxPQUFBLENBQVEsT0FBUixDQURKLENBQUE7O0FBQUEsSUFFQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRlAsQ0FBQTs7QUFBQSxVQUdBLEdBQWEsT0FBQSxDQUFRLFlBQVIsQ0FIYixDQUFBOztBQUFBLE1BUU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsQ0FBRCxFQUFTLElBQVQsR0FBQTtBQUNmLE1BQUEsZ0ZBQUE7O0lBRGdCLElBQUk7R0FDcEI7QUFBQSxFQUFBLEtBQUEsR0FBUSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQVIsQ0FBQTtBQUNBLEVBQUEsSUFBRyxDQUFDLENBQUMsRUFBRixDQUFLLEtBQUwsRUFBWSxDQUFDLENBQUMsVUFBZCxDQUFIO0FBQ0UsSUFBQSxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLFVBQVosQ0FBSDtBQUFnQyxhQUFPLENBQUMsS0FBRCxDQUFQLENBQWhDO0tBREY7R0FBQSxNQUFBO0FBRUssV0FBTyxDQUFDLEtBQUQsQ0FBUCxDQUZMO0dBREE7QUFBQSxFQUlBLEtBQUEsR0FBUSxFQUpSLENBQUE7QUFBQSxFQUtBLEtBQUEsR0FBUSxFQUxSLENBQUE7QUFPQTtBQUFBLE9BQUEscUNBQUE7Z0JBQUE7QUFDRSxJQUFBLEdBQUEsR0FBTSxDQUFDLENBQUMsS0FBRixDQUFRLEtBQVIsQ0FBTixDQUFBO0FBQ0EsSUFBQSxJQUFPLGtCQUFQO0FBQ0UsTUFBQSxFQUFFLENBQUMsT0FBSCxHQUFhLEVBQWIsQ0FERjtLQUFBLE1BRUssSUFBQSxDQUFBLENBQVEsQ0FBQyxFQUFGLENBQUssS0FBTCxFQUFZLEVBQUUsQ0FBQyxPQUFmLENBQVA7QUFDSCxNQUFBLEVBQUUsQ0FBQyxPQUFILEdBQWEsQ0FBQyxFQUFFLENBQUMsT0FBSixDQUFiLENBREc7S0FITDs7TUFLQSxFQUFFLENBQUMsVUFBVztLQUxkO0FBT0EsSUFBQSxJQUFPLGlCQUFQO0FBQ0UsTUFBQSxHQUFBLEdBQU0sQ0FBQyxFQUFFLENBQUMsT0FBSixFQUFhLEVBQUUsQ0FBQyxPQUFoQixDQUFOLENBREY7S0FBQSxNQUFBO0FBSUUsTUFBQSxPQUFBLEdBQVUsRUFBVixDQUFBO0FBQUEsTUFDQSxNQUFBLEdBQVMsY0FEVCxDQUFBO0FBQUEsTUFFQSxNQUFBLEdBQVMsRUFBRSxDQUFDLE1BQUgsSUFBYSxDQUFDLENBQUMsZ0JBRnhCLENBQUE7QUFBQSxNQUdBLE1BQUEsR0FBUyxFQUFFLENBQUMsTUFBSCxJQUFhLENBQUMsQ0FBQyxnQkFBZixJQUFtQyxFQUg1QyxDQUFBO0FBSUEsTUFBQSxJQUFHLE1BQUg7QUFDRSxRQUFBLE1BQUEsR0FBUyxJQUFJLENBQUMsU0FBTCxDQUFrQixNQUFELEdBQVEsR0FBUixHQUFXLE1BQVgsR0FBa0IsR0FBbEIsR0FBcUIsTUFBckIsR0FBOEIsRUFBRSxDQUFDLE1BQWpDLEdBQXdDLElBQXpELENBQVQsQ0FBQTtBQUNBLFFBQUEsSUFBRyxDQUFDLENBQUMsZUFBTDtBQUNFLFVBQUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxNQUFYLENBQUEsQ0FERjtTQURBO0FBQUEsUUFHQSxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWIsQ0FIQSxDQUFBOztjQUlVLENBQUMsUUFBUztTQUpwQjtBQUFBLFFBS0EsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBakIsR0FBd0IsR0FBQSxHQUFJLEVBQUUsQ0FBQyxNQUFQLEdBQWMsSUFMdEMsQ0FERjtPQUpBO0FBQUEsTUFZQSxHQUFBLEdBQU0sQ0FBQyxPQUFPLENBQUMsTUFBUixDQUFlLEVBQUUsQ0FBQyxPQUFsQixDQUFELEVBQTZCLEVBQUUsQ0FBQyxPQUFoQyxDQVpOLENBSkY7S0FQQTtBQUFBLElBeUJBLEtBQUssQ0FBQyxJQUFOLENBQVcsR0FBWCxDQXpCQSxDQURGO0FBQUEsR0FQQTtBQW1DQSxFQUFBLElBQUcsWUFBSDtBQUNFLElBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxZQUFWLEVBQXdCLDJCQUF4QixFQUFxRCxTQUFBLEdBQUE7QUFDbkQsVUFBQSxnQkFBQTtBQUFBO1dBQUEseUNBQUE7c0JBQUE7QUFDRSxxQkFBQSxVQUFVLENBQUMsS0FBWCxDQUFpQixJQUFqQixFQUF1QixFQUF2QixFQUFBLENBREY7QUFBQTtxQkFEbUQ7SUFBQSxDQUFyRCxDQUFBLENBQUE7QUFHQSxJQUFBLElBQUcsQ0FBQyxDQUFDLGVBQUw7QUFDRSxNQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsRUFDRSx1Q0FERixFQUMyQyxTQUFBLEdBQUE7ZUFDdkMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLENBQUMsWUFBRCxDQUFsQixFQUR1QztNQUFBLENBRDNDLENBQUEsQ0FERjtLQUpGO0dBbkNBO1NBNENBLE1BN0NlO0FBQUEsQ0FSakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIikuaW5zdGFsbCgpXG5SID0gcmVxdWlyZShcInJhbWRhXCIpXG5wYXRoID0gcmVxdWlyZShcInBhdGhcIilcbnNvdXJjZWdhdGUgPSByZXF1aXJlKFwic291cmNlZ2F0ZVwiKVxuXG4jIFRPRE86IHRoaXMgbW9kdWxlIHNob3VsZCBiZWNvbWUgaXRzIG93biBwcm9qZWN0LCBvcmxpbi9oYWwtcmM/XG4jIGFzIGd1bHAgaXMgb3B0aW9uYWwsIGRvY3VtZW50IHdoaWNoIG9wdGlvbnMgYXJlIGd1bHAtc3BlY2lmaWNcblxubW9kdWxlLmV4cG9ydHMgPSAobyA9IHt9LCBndWxwKSAtPlxuICBlbXB0eSA9IFtbXSwge31dXG4gIGlmIFIuaXMoQXJyYXksIG8uc291cmNlZ2F0ZSlcbiAgICBpZiBSLmlzRW1wdHkoby5zb3VyY2VnYXRlKSB0aGVuIHJldHVybiBbZW1wdHldXG4gIGVsc2UgcmV0dXJuIFtlbXB0eV0gIyBvciB0aHJvdz9cbiAgcmVhZHkgPSBbXVxuICB3YXRjaCA9IFtdXG5cbiAgZm9yIHNnIGluIG8uc291cmNlZ2F0ZVxuICAgIHJlcyA9IFIuY2xvbmUoZW1wdHkpXG4gICAgdW5sZXNzIHNnLnNvdXJjZXM/XG4gICAgICBzZy5zb3VyY2VzID0gW11cbiAgICBlbHNlIHVubGVzcyBSLmlzKEFycmF5LCBzZy5zb3VyY2VzKVxuICAgICAgc2cuc291cmNlcyA9IFtzZy5zb3VyY2VzXVxuICAgIHNnLm9wdGlvbnMgPz0ge31cblxuICAgIHVubGVzcyBzZy5yZWNpcGU/XG4gICAgICByZXMgPSBbc2cuc291cmNlcywgc2cub3B0aW9uc11cblxuICAgIGVsc2VcbiAgICAgIHNvdXJjZXMgPSBbXVxuICAgICAgY29uZmlnID0gXCJub2RlX21vZHVsZXNcIlxuICAgICAgbW9kdWxlID0gc2cubW9kdWxlIHx8IG8uc291cmNlZ2F0ZU1vZHVsZVxuICAgICAgcHJlZml4ID0gc2cucHJlZml4IHx8IG8uc291cmNlZ2F0ZVByZWZpeCB8fCAnJ1xuICAgICAgaWYgbW9kdWxlXG4gICAgICAgIGNvbmZpZyA9IHBhdGgubm9ybWFsaXplKFwiI3tjb25maWd9LyN7bW9kdWxlfS8je3ByZWZpeH0je3NnLnJlY2lwZX1yY1wiKVxuICAgICAgICBpZiBvLnNvdXJjZWdhdGVXYXRjaFxuICAgICAgICAgIHdhdGNoLnB1c2ggY29uZmlnXG4gICAgICAgIHNvdXJjZXMucHVzaCBjb25maWdcbiAgICAgICAgc2cub3B0aW9ucy53cml0ZSA/PSB7fVxuICAgICAgICBzZy5vcHRpb25zLndyaXRlLnBhdGggPSBcIi4je3NnLnJlY2lwZX1yY1wiXG5cbiAgICAgIHJlcyA9IFtzb3VyY2VzLmNvbmNhdChzZy5zb3VyY2VzKSwgc2cub3B0aW9uc11cblxuICAgIHJlYWR5LnB1c2ggcmVzXG5cbiAgaWYgZ3VscD9cbiAgICBndWxwLnRhc2sgXCJzb3VyY2VnYXRlXCIsIFwiV3JpdGUgc291cmNlZ2F0ZSB0YXJnZXRzLlwiLCAtPlxuICAgICAgZm9yIHNnIGluIHJlYWR5XG4gICAgICAgIHNvdXJjZWdhdGUuYXBwbHkobnVsbCwgc2cpXG4gICAgaWYgby5zb3VyY2VnYXRlV2F0Y2hcbiAgICAgIGd1bHAudGFzayBcInNvdXJjZWdhdGU6d2F0Y2hcIixcbiAgICAgICAgXCJXYXRjaCBzb3VyY2VnYXRlIHNvdXJjZXMgZm9yIGNoYW5nZXMuXCIsIC0+XG4gICAgICAgICAgZ3VscC53YXRjaCB3YXRjaCwgW1wic291cmNlZ2F0ZVwiXVxuXG4gIHJlYWR5XG4iXX0=