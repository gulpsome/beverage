// Generated by CoffeeScript 1.9.1
var R, fs, get, getPreset, nocomments, path, sourcegate;

require("source-map-support").install();

R = require("ramda");

fs = require("fs");

path = require("path");

sourcegate = require("sourcegate");

nocomments = require("strip-json-comments");

get = function(what, module) {
  var e, where;
  where = ["node_modules/" + what, "node_modules/" + module + "/node_modules/" + what];
  try {
    return JSON.parse(nocomments(fs.readFileSync(path.normalize(where[0])).toString()));
  } catch (_error) {
    try {
      return JSON.parse(nocomments(fs.readFileSync(path.normalize(where[1])).toString()));
    } catch (_error) {
      e = _error;
      console.error(e);
      throw new Error("Could not find preset at: " + where);
    }
  }
};

getPreset = function(tool, name, module) {
  var presets, ref;
  presets = {
    jscs: "jscs/presets",
    jshint: {
      airbnb: "airbnb-style/linters/jshintrc"
    },
    eslint: {
      airbnb: "airbnb-style/linters/eslintrc"
    }
  };
  if (tool === "jscs") {
    return get(presets.jscs + "/" + name + ".json", module);
  } else if (((ref = presets[tool]) != null ? ref[name] : void 0) != null) {
    return get(presets[tool][name], module);
  } else {
    return {};
  }
};

module.exports = function(o, gulp) {
  var base, config, empty, i, len, module, prefix, preset, ready, ref, ref1, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (i = 0, len = ref.length; i < len; i++) {
    sg = ref[i];
    res = R.clone(empty);
    if (sg.sources == null) {
      sg.sources = ((ref1 = o.sourcegateRx) != null ? ref1[sg.recipe] : void 0) || [];
    } else if (!R.is(Array, sg.sources)) {
      sg.sources = [sg.sources];
    }
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      sources = [];
      config = "node_modules";
      module = sg.module || o.sourcegateModule;
      prefix = sg.prefix || o.sourcegatePrefix || '';
      preset = sg.preset || o.sourcegatePreset;
      if (module) {
        config = path.normalize(config + "/" + module + "/" + prefix + sg.recipe + "rc");
        if (o.sourcegateWatch) {
          watch.push(config);
        }
        if (preset != null) {
          sources.push(getPreset(sg.recipe, preset, module));
        }
        sources.push(config);
        if ((base = sg.options).write == null) {
          base.write = {};
        }
        sg.options.write.path = "." + sg.recipe + "rc";
      }
      res = [sources.concat(sg.sources), sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    gulp.task("sourcegate", "Write sourcegate targets.", function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = ready.length; j < len1; j++) {
        sg = ready[j];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourcegateWatch) {
      gulp.task("sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  return ready;
};

//# sourceMappingURL=data:application/json;base64,