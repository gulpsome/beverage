// Generated by CoffeeScript 1.9.1
var R, path, sourcegate;

require("source-map-support").install();

R = require("ramda");

path = require("path");

sourcegate = require("sourcegate");

module.exports = function(o, gulp) {
  var base, config, empty, i, len, module, prefix, ready, ref, ref1, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (i = 0, len = ref.length; i < len; i++) {
    sg = ref[i];
    res = R.clone(empty);
    if (sg.sources == null) {
      sg.sources = ((ref1 = o.sourcegateRx) != null ? ref1[sg.recipe] : void 0) || [];
    } else if (!R.is(Array, sg.sources)) {
      sg.sources = [sg.sources];
    }
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      sources = [];
      config = "node_modules";
      module = sg.module || o.sourcegateModule;
      prefix = sg.prefix || o.sourcegatePrefix || '';
      if (module) {
        config = path.normalize(config + "/" + module + "/" + prefix + sg.recipe + "rc");
        if (o.sourcegateWatch) {
          watch.push(config);
        }
        sources.push(config);
        if ((base = sg.options).write == null) {
          base.write = {};
        }
        sg.options.write.path = "." + sg.recipe + "rc";
      }
      res = [sources.concat(sg.sources), sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    gulp.task("sourcegate", "Write sourcegate targets.", function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = ready.length; j < len1; j++) {
        sg = ready[j];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourcegateWatch) {
      gulp.task("sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  return ready;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlZ2F0ZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic291cmNlZ2F0ZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLG1CQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLENBQ0EsR0FBSSxPQUFBLENBQVEsT0FBUixDQURKLENBQUE7O0FBQUEsSUFFQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRlAsQ0FBQTs7QUFBQSxVQUdBLEdBQWEsT0FBQSxDQUFRLFlBQVIsQ0FIYixDQUFBOztBQUFBLE1BUU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsQ0FBRCxFQUFTLElBQVQsR0FBQTtBQUNmLE1BQUEsc0ZBQUE7O0lBRGdCLElBQUk7R0FDcEI7QUFBQSxFQUFBLEtBQUEsR0FBUSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQVIsQ0FBQTtBQUNBLEVBQUEsSUFBRyxDQUFDLENBQUMsRUFBRixDQUFLLEtBQUwsRUFBWSxDQUFDLENBQUMsVUFBZCxDQUFIO0FBQ0UsSUFBQSxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLFVBQVosQ0FBSDtBQUFnQyxhQUFPLENBQUMsS0FBRCxDQUFQLENBQWhDO0tBREY7R0FBQSxNQUFBO0FBRUssV0FBTyxDQUFDLEtBQUQsQ0FBUCxDQUZMO0dBREE7QUFBQSxFQUlBLEtBQUEsR0FBUSxFQUpSLENBQUE7QUFBQSxFQUtBLEtBQUEsR0FBUSxFQUxSLENBQUE7QUFPQTtBQUFBLE9BQUEscUNBQUE7Z0JBQUE7QUFDRSxJQUFBLEdBQUEsR0FBTSxDQUFDLENBQUMsS0FBRixDQUFRLEtBQVIsQ0FBTixDQUFBO0FBQ0EsSUFBQSxJQUFPLGtCQUFQO0FBQ0UsTUFBQSxFQUFFLENBQUMsT0FBSCwwQ0FBNkIsQ0FBQSxFQUFFLENBQUMsTUFBSCxXQUFoQixJQUE4QixFQUEzQyxDQURGO0tBQUEsTUFFSyxJQUFBLENBQUEsQ0FBUSxDQUFDLEVBQUYsQ0FBSyxLQUFMLEVBQVksRUFBRSxDQUFDLE9BQWYsQ0FBUDtBQUNILE1BQUEsRUFBRSxDQUFDLE9BQUgsR0FBYSxDQUFDLEVBQUUsQ0FBQyxPQUFKLENBQWIsQ0FERztLQUhMOztNQUtBLEVBQUUsQ0FBQyxVQUFXO0tBTGQ7QUFPQSxJQUFBLElBQU8saUJBQVA7QUFDRSxNQUFBLEdBQUEsR0FBTSxDQUFDLEVBQUUsQ0FBQyxPQUFKLEVBQWEsRUFBRSxDQUFDLE9BQWhCLENBQU4sQ0FERjtLQUFBLE1BQUE7QUFJRSxNQUFBLE9BQUEsR0FBVSxFQUFWLENBQUE7QUFBQSxNQUNBLE1BQUEsR0FBUyxjQURULENBQUE7QUFBQSxNQUVBLE1BQUEsR0FBUyxFQUFFLENBQUMsTUFBSCxJQUFhLENBQUMsQ0FBQyxnQkFGeEIsQ0FBQTtBQUFBLE1BR0EsTUFBQSxHQUFTLEVBQUUsQ0FBQyxNQUFILElBQWEsQ0FBQyxDQUFDLGdCQUFmLElBQW1DLEVBSDVDLENBQUE7QUFJQSxNQUFBLElBQUcsTUFBSDtBQUNFLFFBQUEsTUFBQSxHQUFTLElBQUksQ0FBQyxTQUFMLENBQWtCLE1BQUQsR0FBUSxHQUFSLEdBQVcsTUFBWCxHQUFrQixHQUFsQixHQUFxQixNQUFyQixHQUE4QixFQUFFLENBQUMsTUFBakMsR0FBd0MsSUFBekQsQ0FBVCxDQUFBO0FBQ0EsUUFBQSxJQUFHLENBQUMsQ0FBQyxlQUFMO0FBQ0UsVUFBQSxLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsQ0FBQSxDQURGO1NBREE7QUFBQSxRQUdBLE9BQU8sQ0FBQyxJQUFSLENBQWEsTUFBYixDQUhBLENBQUE7O2NBSVUsQ0FBQyxRQUFTO1NBSnBCO0FBQUEsUUFLQSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFqQixHQUF3QixHQUFBLEdBQUksRUFBRSxDQUFDLE1BQVAsR0FBYyxJQUx0QyxDQURGO09BSkE7QUFBQSxNQVlBLEdBQUEsR0FBTSxDQUFDLE9BQU8sQ0FBQyxNQUFSLENBQWUsRUFBRSxDQUFDLE9BQWxCLENBQUQsRUFBNkIsRUFBRSxDQUFDLE9BQWhDLENBWk4sQ0FKRjtLQVBBO0FBQUEsSUF5QkEsS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYLENBekJBLENBREY7QUFBQSxHQVBBO0FBbUNBLEVBQUEsSUFBRyxZQUFIO0FBQ0UsSUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLFlBQVYsRUFBd0IsMkJBQXhCLEVBQXFELFNBQUEsR0FBQTtBQUNuRCxVQUFBLGdCQUFBO0FBQUE7V0FBQSx5Q0FBQTtzQkFBQTtBQUNFLHFCQUFBLFVBQVUsQ0FBQyxLQUFYLENBQWlCLElBQWpCLEVBQXVCLEVBQXZCLEVBQUEsQ0FERjtBQUFBO3FCQURtRDtJQUFBLENBQXJELENBQUEsQ0FBQTtBQUdBLElBQUEsSUFBRyxDQUFDLENBQUMsZUFBTDtBQUNFLE1BQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxrQkFBVixFQUNFLHVDQURGLEVBQzJDLFNBQUEsR0FBQTtlQUN2QyxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQVgsRUFBa0IsQ0FBQyxZQUFELENBQWxCLEVBRHVDO01BQUEsQ0FEM0MsQ0FBQSxDQURGO0tBSkY7R0FuQ0E7U0E0Q0EsTUE3Q2U7QUFBQSxDQVJqQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKClcblIgPSByZXF1aXJlKFwicmFtZGFcIilcbnBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxuc291cmNlZ2F0ZSA9IHJlcXVpcmUoXCJzb3VyY2VnYXRlXCIpXG5cbiMgVE9ETzogdGhpcyBtb2R1bGUgc2hvdWxkIGJlY29tZSBpdHMgb3duIHByb2plY3QsIG9ybGluL2hhbC1yYz9cbiMgYXMgZ3VscCBpcyBvcHRpb25hbCwgZG9jdW1lbnQgd2hpY2ggb3B0aW9ucyBhcmUgZ3VscC1zcGVjaWZpY1xuXG5tb2R1bGUuZXhwb3J0cyA9IChvID0ge30sIGd1bHApIC0+XG4gIGVtcHR5ID0gW1tdLCB7fV1cbiAgaWYgUi5pcyhBcnJheSwgby5zb3VyY2VnYXRlKVxuICAgIGlmIFIuaXNFbXB0eShvLnNvdXJjZWdhdGUpIHRoZW4gcmV0dXJuIFtlbXB0eV1cbiAgZWxzZSByZXR1cm4gW2VtcHR5XSAjIG9yIHRocm93P1xuICByZWFkeSA9IFtdXG4gIHdhdGNoID0gW11cblxuICBmb3Igc2cgaW4gby5zb3VyY2VnYXRlXG4gICAgcmVzID0gUi5jbG9uZShlbXB0eSlcbiAgICB1bmxlc3Mgc2cuc291cmNlcz9cbiAgICAgIHNnLnNvdXJjZXMgPSBvLnNvdXJjZWdhdGVSeD9bc2cucmVjaXBlXSB8fCBbXVxuICAgIGVsc2UgdW5sZXNzIFIuaXMoQXJyYXksIHNnLnNvdXJjZXMpXG4gICAgICBzZy5zb3VyY2VzID0gW3NnLnNvdXJjZXNdXG4gICAgc2cub3B0aW9ucyA/PSB7fVxuXG4gICAgdW5sZXNzIHNnLnJlY2lwZT9cbiAgICAgIHJlcyA9IFtzZy5zb3VyY2VzLCBzZy5vcHRpb25zXVxuXG4gICAgZWxzZVxuICAgICAgc291cmNlcyA9IFtdXG4gICAgICBjb25maWcgPSBcIm5vZGVfbW9kdWxlc1wiXG4gICAgICBtb2R1bGUgPSBzZy5tb2R1bGUgfHwgby5zb3VyY2VnYXRlTW9kdWxlXG4gICAgICBwcmVmaXggPSBzZy5wcmVmaXggfHwgby5zb3VyY2VnYXRlUHJlZml4IHx8ICcnXG4gICAgICBpZiBtb2R1bGVcbiAgICAgICAgY29uZmlnID0gcGF0aC5ub3JtYWxpemUoXCIje2NvbmZpZ30vI3ttb2R1bGV9LyN7cHJlZml4fSN7c2cucmVjaXBlfXJjXCIpXG4gICAgICAgIGlmIG8uc291cmNlZ2F0ZVdhdGNoXG4gICAgICAgICAgd2F0Y2gucHVzaCBjb25maWdcbiAgICAgICAgc291cmNlcy5wdXNoIGNvbmZpZ1xuICAgICAgICBzZy5vcHRpb25zLndyaXRlID89IHt9XG4gICAgICAgIHNnLm9wdGlvbnMud3JpdGUucGF0aCA9IFwiLiN7c2cucmVjaXBlfXJjXCJcblxuICAgICAgcmVzID0gW3NvdXJjZXMuY29uY2F0KHNnLnNvdXJjZXMpLCBzZy5vcHRpb25zXVxuXG4gICAgcmVhZHkucHVzaCByZXNcblxuICBpZiBndWxwP1xuICAgIGd1bHAudGFzayBcInNvdXJjZWdhdGVcIiwgXCJXcml0ZSBzb3VyY2VnYXRlIHRhcmdldHMuXCIsIC0+XG4gICAgICBmb3Igc2cgaW4gcmVhZHlcbiAgICAgICAgc291cmNlZ2F0ZS5hcHBseShudWxsLCBzZylcbiAgICBpZiBvLnNvdXJjZWdhdGVXYXRjaFxuICAgICAgZ3VscC50YXNrIFwic291cmNlZ2F0ZTp3YXRjaFwiLFxuICAgICAgICBcIldhdGNoIHNvdXJjZWdhdGUgc291cmNlcyBmb3IgY2hhbmdlcy5cIiwgLT5cbiAgICAgICAgICBndWxwLndhdGNoIHdhdGNoLCBbXCJzb3VyY2VnYXRlXCJdXG5cbiAgcmVhZHlcbiJdfQ==